import sys
import os
import importlib.util
from telethon import TelegramClient
from telethon.tl.types import Channel, User
from datetime import datetime, timedelta
import openai
from typing import List
import pytz
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import asyncio
import threading
from functools import partial
import json

def load_config(config_name):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    config_path = f"configs/{config_name}.py"
    try:
        if not os.path.exists(config_path):
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            
        spec = importlib.util.spec_from_file_location("config", config_path)
        if spec is None:
            raise ImportError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å spec –¥–ª—è: {config_path}")
            
        config = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(config)
        return config
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")

async def get_chat_messages(client: TelegramClient, chat_link: str, limit_hours: int = 24) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit_hours —á–∞—Å–æ–≤"""
    messages = []
    current_time = datetime.now(pytz.UTC)
    time_limit = current_time - timedelta(hours=limit_hours)
    
    try:
        entity = await client.get_entity(chat_link)
        
        async for message in client.iter_messages(entity, limit=None):
            if message.date < time_limit:
                break
                
            if message.text:
                formatted_date = message.date.strftime("%Y-%m-%d %H:%M:%S UTC")
                messages.append(f"{formatted_date}: {message.text}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    return messages

class TelegramSummarizerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Telegram Channel Summarizer")
        self.root.geometry("900x700")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è event loop
        self.loop = asyncio.new_event_loop()
        self.running = True
        
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
        self.main_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(self.main_frame, text="–û—Å–Ω–æ–≤–Ω–æ–µ")
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(self.settings_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.settings = {
            'openai_model': 'gpt-3.5-turbo',
            'system_prompt': '–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –¥–∏—Å–∫—É—Å—Å–∏–π.',
            'available_models': [
                'gpt-3.5-turbo',
                'gpt-4',
                'gpt-4-turbo-preview'
            ]
        }
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_main_tab()
        self.setup_settings_tab()
        
        # –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()
        
        # –î–∞–Ω–Ω—ã–µ
        self.client = None
        self.dialogs = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        self.config_combo.bind('<<ComboboxSelected>>', self.on_config_change)
    
    def setup_main_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        ttk.Label(self.main_frame, text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:").grid(row=0, column=0, sticky=tk.W)
        self.config_var = tk.StringVar()
        self.config_combo = ttk.Combobox(self.main_frame, textvariable=self.config_var, state="readonly")
        configs = self.get_config_files()
        self.config_combo['values'] = configs
        if configs:  # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.config_combo.set(configs[0])
        self.config_combo.grid(row=0, column=1, columnspan=2, sticky=(tk.W, tk.E), padx=5, pady=5)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫
        ttk.Label(self.main_frame, text="–ò—Å—Ç–æ—á–Ω–∏–∫:").grid(row=1, column=0, sticky=tk.W)
        self.source_entry = ttk.Entry(self.main_frame)
        self.source_entry.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E), padx=5, pady=5)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        ttk.Label(self.main_frame, text="–ß–∞—Å—ã:").grid(row=2, column=0, sticky=tk.W)
        self.hours_var = tk.StringVar(value="24")
        self.hours_entry = ttk.Entry(self.main_frame, textvariable=self.hours_var)
        self.hours_entry.grid(row=2, column=1, columnspan=2, sticky=(tk.W, tk.E), padx=5, pady=5)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
        ttk.Label(self.main_frame, text="–ü—Ä–æ–º–ø—Ç:").grid(row=3, column=0, sticky=tk.W)
        self.user_prompt = scrolledtext.ScrolledText(self.main_frame, height=4)
        self.user_prompt.grid(row=3, column=1, columnspan=2, sticky=(tk.W, tk.E), padx=5, pady=5)
        self.user_prompt.insert('1.0', "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤—ã–¥–µ–ª–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:")
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.search_frame = ttk.Frame(self.main_frame)
        self.search_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), padx=5, pady=5)
        
        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_var = tk.StringVar()
        self.search_var.trace('w', self.filter_dialogs)
        ttk.Label(self.search_frame, text="üîç").pack(side=tk.LEFT, padx=2)
        self.search_entry = ttk.Entry(self.search_frame, textvariable=self.search_var)
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        
        # –§–∏–ª—å—Ç—Ä—ã —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
        self.filter_frame = ttk.Frame(self.search_frame)
        self.filter_frame.pack(side=tk.LEFT, padx=5)
        
        self.show_channels = tk.BooleanVar(value=True)
        self.show_groups = tk.BooleanVar(value=True)
        self.show_private = tk.BooleanVar(value=True)
        
        ttk.Checkbutton(self.filter_frame, text="–ö–∞–Ω–∞–ª—ã", variable=self.show_channels, 
                       command=self.filter_dialogs).pack(side=tk.LEFT, padx=2)
        ttk.Checkbutton(self.filter_frame, text="–ì—Ä—É–ø–ø—ã", variable=self.show_groups,
                       command=self.filter_dialogs).pack(side=tk.LEFT, padx=2)
        ttk.Checkbutton(self.filter_frame, text="–õ–∏—á–Ω—ã–µ", variable=self.show_private,
                       command=self.filter_dialogs).pack(side=tk.LEFT, padx=2)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        self.sort_var = tk.StringVar(value="name")
        ttk.Label(self.filter_frame, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:").pack(side=tk.LEFT, padx=5)
        sort_combo = ttk.Combobox(self.filter_frame, textvariable=self.sort_var, 
                                 values=["–∏–º—è", "—Ç–∏–ø", "–ø–∞–ø–∫–∞"], state="readonly", width=10)
        sort_combo.pack(side=tk.LEFT, padx=2)
        sort_combo.bind('<<ComboboxSelected>>', self.filter_dialogs)
        
        # –°–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º Treeview –≤–º–µ—Å—Ç–æ Listbox)
        self.dialogs_frame = ttk.Frame(self.main_frame)
        self.dialogs_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Treeview
        self.dialogs_tree = ttk.Treeview(self.dialogs_frame, columns=('type', 'folder', 'id'),
                                        show='tree headings')
        self.dialogs_tree.heading('type', text='–¢–∏–ø')
        self.dialogs_tree.heading('folder', text='–ü–∞–ø–∫–∞')
        self.dialogs_tree.column('type', width=100)
        self.dialogs_tree.column('folder', width=100)
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É id
        self.dialogs_tree.column('id', width=0, stretch=False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(self.dialogs_frame, orient=tk.VERTICAL, 
                                command=self.dialogs_tree.yview)
        self.dialogs_tree.configure(yscrollcommand=scrollbar.set)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        self.dialogs_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏
        self.buttons_frame = ttk.Frame(self.main_frame)
        self.buttons_frame.grid(row=6, column=0, columnspan=3, pady=10)
        
        self.load_dialogs_btn = ttk.Button(self.buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏", 
                                         command=self.load_dialogs)
        self.load_dialogs_btn.pack(side=tk.LEFT, padx=5)
        
        self.start_btn = ttk.Button(self.buttons_frame, text="–°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏", 
                                  command=self.start_summarization)
        self.start_btn.pack(side=tk.LEFT, padx=5)
        
        # –õ–æ–≥
        ttk.Label(self.main_frame, text="–õ–æ–≥:").grid(row=7, column=0, sticky=tk.W)
        self.log_text = tk.Text(self.main_frame, height=10, wrap=tk.WORD)
        self.log_text.grid(row=8, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress = ttk.Progressbar(self.main_frame, mode='indeterminate')
        self.progress.grid(row=9, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
    
    def setup_settings_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        ttk.Label(self.settings_frame, text="–ú–æ–¥–µ–ª—å OpenAI:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.model_var = tk.StringVar(value=self.settings['openai_model'])
        self.model_combo = ttk.Combobox(self.settings_frame, textvariable=self.model_var)
        self.model_combo['values'] = self.settings['available_models']
        self.model_combo.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=5, pady=5)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        ttk.Label(self.settings_frame, text="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.system_prompt = scrolledtext.ScrolledText(self.settings_frame, height=6)
        self.system_prompt.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=5, pady=5)
        self.system_prompt.insert('1.0', self.settings['system_prompt'])
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = ttk.Button(self.settings_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                                 command=self.save_settings)
        self.save_btn.grid(row=2, column=0, columnspan=2, pady=10)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('summarizer_settings.json', 'r', encoding='utf-8') as f:
                saved_settings = json.load(f)
                self.settings.update(saved_settings)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                self.model_var.set(self.settings['openai_model'])
                self.system_prompt.delete('1.0', tk.END)
                self.system_prompt.insert('1.0', self.settings['system_prompt'])
        except FileNotFoundError:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.save_settings()
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            if hasattr(self, 'model_var'):
                self.settings['openai_model'] = self.model_var.get()
            if hasattr(self, 'system_prompt'):
                self.settings['system_prompt'] = self.system_prompt.get('1.0', tk.END).strip()
            
            with open('summarizer_settings.json', 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, ensure_ascii=False, indent=2)
            self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def get_config_files(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        configs = []
        configs_dir = "configs"
        if not os.path.exists(configs_dir):
            os.makedirs(configs_dir)
            self.create_default_config()
            self.log("–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ configs —Å —à–∞–±–ª–æ–Ω–æ–º –∫–æ–Ω—Ñ–∏–≥–∞")
        
        for file in os.listdir(configs_dir):
            if file.endswith(".py") and not file.startswith("__"):
                configs.append(file[:-3])
        
        if not configs:
            self.create_default_config()
            configs = ["config_template"]
            self.log("–°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥–∞ config_template.py")
        
        return configs

    def create_default_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        config_template = """# Telegram API credentials
api_id = 123456  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à api_id
api_hash = 'your_api_hash_here'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à api_hash

# Proxy settings
use_proxy = False  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ True, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–æ–∫—Å–∏
proxy_settings = {
    'proxy_type': 'socks5',
    'proxy_host': '127.0.0.1',
    'proxy_port': 9150
}

# OpenAI API key
openai_api_key = 'your_openai_api_key_here'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á OpenAI
"""
        with open("configs/config_template.py", "w", encoding="utf-8") as f:
            f.write(config_template)

    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        if hasattr(self, 'log_text'):
            self.log_text.insert(tk.END, f"{message}\n")
            self.log_text.see(tk.END)
        else:
            print(message)  # Fallback –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ª–æ–≥ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        
    async def init_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram"""
        try:
            config_name = self.config_var.get()
            if not config_name:
                raise ValueError("–ù–µ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'client') and self.client is not None:
                if self.client.is_connected():
                    await self.client.disconnect()
                self.client = None
                
            config = load_config(config_name)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–æ–Ω—Ñ–∏–≥–∞ –∫–∞–∫ –∏–º—è —Å–µ—Å—Å–∏–∏
            session_name = f"sessions/{config_name}"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–µ—Å—Å–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs("sessions", exist_ok=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            proxy_settings = None
            if hasattr(config, 'use_proxy') and config.use_proxy and hasattr(config, 'proxy_settings'):
                proxy_settings = (
                    config.proxy_settings['proxy_type'],
                    config.proxy_settings['proxy_host'],
                    config.proxy_settings['proxy_port']
                )
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
            self.client = TelegramClient(session_name, config.api_id, config.api_hash, proxy=proxy_settings)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è, –Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
            await self.client.connect()
            
            if not await self.client.is_user_authorized():
                self.log(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ {config_name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞.")
                await self.client.start()
            else:
                self.log(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ {config_name}")
                
            return True
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            if "–ù–µ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª" in str(e):
                self.log("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞")
                self.log("–ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª configs/config_template.py")
            return False

    def on_config_change(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞"""
        self.progress.start()
        
        async def reconnect():
            try:
                if hasattr(self, 'client') and self.client is not None:
                    if self.client.is_connected():
                        await self.client.disconnect()
                    self.client = None
                self.dialogs = []
                self.dialogs_tree.delete(*self.dialogs_tree.get_children())
                self.log(f"–í—ã–±—Ä–∞–Ω –∫–æ–Ω—Ñ–∏–≥: {self.config_var.get()}")
            finally:
                self.progress.stop()
            
        asyncio.run_coroutine_threadsafe(reconnect(), self.loop)

    def load_dialogs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        self.progress.start()
        self.load_dialogs_btn.state(['disabled'])
        
        async def load():
            try:
                if not self.client or not self.client.is_connected():
                    if not await self.init_client():
                        return
                        
                self.dialogs = []
                self.dialogs_tree.delete(*self.dialogs_tree.get_children())
                
                async for dialog in self.client.iter_dialogs():
                    dialog_type = "–ö–∞–Ω–∞–ª" if isinstance(dialog.entity, Channel) else "–ß–∞—Ç" if dialog.is_group else "–õ–∏—á–∫–∞"
                    self.dialogs.append({
                        'id': dialog.id,
                        'name': dialog.name,
                        'type': dialog_type,
                        'entity': dialog.entity
                    })
                    self.dialogs_tree.insert('', 'end', text=dialog.name, values=(dialog_type, '', dialog.id))
                    
                self.log("–î–∏–∞–ª–æ–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            finally:
                self.progress.stop()
                self.load_dialogs_btn.state(['!disabled'])
                
        asyncio.run_coroutine_threadsafe(load(), self.loop)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.running = False
        
        async def cleanup_async():
            if hasattr(self, 'client') and self.client is not None:
                if self.client.is_connected():
                    await self.client.disconnect()
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É
            future = asyncio.run_coroutine_threadsafe(cleanup_async(), self.loop)
            future.result(timeout=5)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –±–æ–ª–µ–µ 5 —Å–µ–∫—É–Ω–¥
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.loop.call_soon_threadsafe(self.loop.stop)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

    async def summarize(self):
        """–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏"""
        try:
            if not self.client or not self.client.is_connected():
                if not await self.init_client():
                    return

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            selected_items = self.dialogs_tree.selection()
            if not selected_items:
                self.log("–ù–µ –≤—ã–±—Ä–∞–Ω —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç")
                return
                
            selected_item = selected_items[0]
            # –ü–æ–ª—É—á–∞–µ–º id –¥–∏–∞–ª–æ–≥–∞ –∏–∑ —Å–∫—Ä—ã—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏
            dialog_id = self.dialogs_tree.item(selected_item)['values'][2]
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥
            target_dialog = next((d for d in self.dialogs if d['id'] == dialog_id), None)
            if not target_dialog:
                self.log("–¶–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            target_entity = target_dialog['entity']
            source_chat = self.source_entry.get()
            hours = int(self.hours_var.get())
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            self.log("–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π...")
            messages = await get_chat_messages(self.client, source_chat, hours)
            
            if not messages:
                self.log("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
                
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏
            self.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏...")
            config = load_config(self.config_var.get())
            openai_client = openai.AsyncOpenAI(api_key=config.openai_api_key)
            summary = await self.generate_summary(messages, openai_client)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∞–º–º–∞—Ä–∏...")
            await self.client.send_message(
                target_entity,
                f"üìù –°–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞ {source_chat} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n\n{summary}"
            )
            
            self.log("–°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞: {e}")
            
    def start_summarization(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏"""
        self.progress.start()
        self.start_btn.state(['disabled'])
        
        async def run():
            try:
                await self.summarize()
            finally:
                self.progress.stop()
                self.start_btn.state(['!disabled'])
            
        asyncio.run_coroutine_threadsafe(run(), self.loop)

    async def generate_summary(self, messages: List[str], openai_client) -> str:
        if not messages:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

        def estimate_tokens(text: str) -> int:
            return len(text) // 4

        MAX_TOKENS = 14000
        current_chunk = []
        chunks = []
        current_tokens = 0

        for message in messages:
            message_tokens = estimate_tokens(message)
            if current_tokens + message_tokens > MAX_TOKENS:
                chunks.append(current_chunk)
                current_chunk = [message]
                current_tokens = message_tokens
            else:
                current_chunk.append(message)
                current_tokens += message_tokens

        if current_chunk:
            chunks.append(current_chunk)

        summaries = []
        user_prompt = self.user_prompt.get('1.0', tk.END).strip()
        
        for i, chunk in enumerate(chunks):
            chunk_prompt = f"""{user_prompt}

{'\n'.join(chunk)}

–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:"""

            try:
                response = await openai_client.chat.completions.create(
                    model=self.settings['openai_model'],
                    messages=[
                        {"role": "system", "content": self.settings['system_prompt']},
                        {"role": "user", "content": chunk_prompt}
                    ]
                )
                summaries.append(response.choices[0].message.content)
            except Exception as e:
                summaries.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏ —á–∞—Å—Ç–∏ {i+1}: {str(e)}")

        if len(summaries) > 1:
            try:
                final_prompt = f"""–û–±—ä–µ–¥–∏–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Å–∞–º–º–∞—Ä–∏ —á–∞—Å—Ç–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ –æ–¥–Ω–æ –∫—Ä–∞—Ç–∫–æ–µ –∏ —Å–≤—è–∑–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:

{''.join(f"–ß–∞—Å—Ç—å {i+1}:\n{summary}\n\n" for i, summary in enumerate(summaries))}

–û–±—â–µ–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:"""

                response = await openai_client.chat.completions.create(
                    model=self.settings['openai_model'],
                    messages=[
                        {"role": "system", "content": self.settings['system_prompt']},
                        {"role": "user", "content": final_prompt}
                    ]
                )
                return response.choices[0].message.content
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∞–º–º–∞—Ä–∏: {str(e)}"
        else:
            return summaries[0]

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        def run_loop():
            asyncio.set_event_loop(self.loop)
            self.loop.run_forever()
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.loop_thread = threading.Thread(target=run_loop, daemon=True)
        self.loop_thread.start()
        
        try:
            self.root.mainloop()
        finally:
            self.cleanup()
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ loop
            if hasattr(self, 'loop_thread'):
                self.loop_thread.join(timeout=5)

    def filter_dialogs(self, *args):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if not hasattr(self, 'dialogs'):
            return
            
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        for item in self.dialogs_tree.get_children():
            self.dialogs_tree.delete(item)
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞
        search_text = self.search_var.get().lower()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        folders = {}
        
        for dialog in self.dialogs:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º
            if not self._dialog_matches_filters(dialog):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫—É
            if search_text and search_text not in dialog['name'].lower():
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–∏–∞–ª–æ–≥–∞
            folder = dialog.get('folder', '–ë–µ–∑ –ø–∞–ø–∫–∏')
            
            if folder not in folders:
                folders[folder] = []
            folders[folder].append(dialog)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
        sort_key = self.sort_var.get()
        
        for folder, folder_dialogs in sorted(folders.items()):
            # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –ø–∞–ø–∫–∏
            folder_id = self.dialogs_tree.insert('', 'end', text=folder, values=('', '', ''))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏ –≤ –ø–∞–ø–∫–µ
            sorted_dialogs = self._sort_dialogs(folder_dialogs, sort_key)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥–∏
            for dialog in sorted_dialogs:
                self.dialogs_tree.insert(folder_id, 'end', text=dialog['name'],
                                       values=(dialog['type'], 
                                              dialog.get('folder', ''),
                                              dialog['id']))  # –î–æ–±–∞–≤–ª—è–µ–º id –≤ —Å–∫—Ä—ã—Ç—É—é –∫–æ–ª–æ–Ω–∫—É

    def _dialog_matches_filters(self, dialog):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ç–µ–∫—É—â–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        dialog_type = dialog['type']
        if dialog_type == "–ö–∞–Ω–∞–ª" and not self.show_channels.get():
            return False
        if dialog_type == "–ß–∞—Ç" and not self.show_groups.get():
            return False
        if dialog_type == "–õ–∏—á–∫–∞" and not self.show_private.get():
            return False
        return True

    def _sort_dialogs(self, dialogs, sort_key):
        """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
        if sort_key == "–∏–º—è":
            return sorted(dialogs, key=lambda x: x['name'].lower())
        elif sort_key == "—Ç–∏–ø":
            return sorted(dialogs, key=lambda x: (x['type'], x['name'].lower()))
        elif sort_key == "–ø–∞–ø–∫–∞":
            return sorted(dialogs, key=lambda x: (x.get('folder', ''), x['name'].lower()))
        return dialogs

if __name__ == "__main__":
    root = tk.Tk()
    app = TelegramSummarizerGUI(root)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    def on_closing():
        app.root.quit()
        app.root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    app.run() 