import sys
import os
import importlib.util
from telethon import TelegramClient
from telethon.tl.types import Channel, User
from datetime import datetime, timedelta
import openai
from typing import List
import pytz

def load_config(config_name):
    config_path = f"configs/{config_name}.py"
    try:
        if not os.path.exists(config_path):
            print(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
            sys.exit(1)
            
        spec = importlib.util.spec_from_file_location("config", config_path)
        if spec is None:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å spec –¥–ª—è: {config_path}")
            sys.exit(1)
            
        config = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(config)
        return config
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        sys.exit(1)

async def get_chat_messages(client: TelegramClient, chat_link: str, limit_hours: int = 24) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit_hours —á–∞—Å–æ–≤"""
    messages = []
    current_time = datetime.now(pytz.UTC)
    time_limit = current_time - timedelta(hours=limit_hours)
    
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: {current_time}")
    print(f"–°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å: {time_limit}")
    
    try:
        entity = await client.get_entity(chat_link)
        print(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑: {entity.title}")
        
        async for message in client.iter_messages(entity, limit=None):
            if message.date < time_limit:
                print(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ({message.date})")
                break
                
            if message.text:
                formatted_date = message.date.strftime("%Y-%m-%d %H:%M:%S UTC")
                messages.append(f"{formatted_date}: {message.text}")
                print(f"[+] –°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {formatted_date}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        return []
    
    print(f"\n–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    return messages

async def generate_summary(messages: List[str], openai_client) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏ —á–µ—Ä–µ–∑ OpenAI API"""
    if not messages:
        return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    prompt = f"""–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –≤—ã–¥–µ–ª–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:

{'\n'.join(messages)}

–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:"""

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–∞–º–º–∞—Ä–∏ –¥–∏—Å–∫—É—Å—Å–∏–π."},
                {"role": "user", "content": prompt}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}"

async def list_dialogs(client: TelegramClient):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:")
    print("-" * 50)
    dialogs = []
    async for dialog in client.iter_dialogs():
        dialog_type = "–ö–∞–Ω–∞–ª" if isinstance(dialog.entity, Channel) else "–ß–∞—Ç" if dialog.is_group else "–õ–∏—á–∫–∞"
        dialogs.append({
            'id': dialog.id,
            'name': dialog.name,
            'type': dialog_type,
            'entity': dialog.entity
        })
        print(f"{len(dialogs)-1}. [{dialog_type}] {dialog.name}")
    print("-" * 50)
    return dialogs

async def select_target_chat(client: TelegramClient, target_identifier: str) -> object:
    """–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏"""
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —á–∏—Å–ª–æ–≤–æ–π –∏–Ω–¥–µ–∫—Å
        if target_identifier.isdigit():
            dialogs = await list_dialogs(client)
            index = int(target_identifier)
            if 0 <= index < len(dialogs):
                return dialogs[index]['entity']
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–∏–∞–ª–æ–≥–∞")
                return None
                
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username –∏–ª–∏ —Å—Å—ã–ª–∫–∞
        else:
            entity = await client.get_entity(target_identifier)
            return entity
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
        print("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, —É–∫–∞–∑–∞–≤ –µ–≥–æ –Ω–æ–º–µ—Ä:")
        dialogs = await list_dialogs(client)
        
        while True:
            try:
                choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞: ")
                index = int(choice)
                if 0 <= index < len(dialogs):
                    return dialogs[index]['entity']
                else:
                    print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
                return None

async def main(config_name: str, source_chat: str, target_chat: str, hours: int = 24):
    config = load_config(config_name)
    
    openai_client = openai.AsyncOpenAI(api_key=config.openai_api_key)
    proxy_settings = (config.proxy_type, config.proxy_host, config.proxy_port) if hasattr(config, 'proxy_type') else None
    
    async with TelegramClient('anon', config.api_id, config.api_hash, proxy=proxy_settings) as client:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
        messages = await get_chat_messages(client, source_chat, hours)
        
        if not messages:
            print("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
        target_entity = await select_target_chat(client, target_chat)
        if not target_entity:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç")
            return
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏
        summary = await generate_summary(messages, openai_client)
        await client.send_message(target_entity, f"üìù –°–∞–º–º–∞—Ä–∏ —á–∞—Ç–∞ {source_chat} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n\n{summary}")
        print("–°–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("1. –ü–æ username/—Å—Å—ã–ª–∫–µ: python sh_new_proxy.py <–∏–º—è_–∫–æ–Ω—Ñ–∏–≥–∞> <–∏—Å—Ç–æ—á–Ω–∏–∫> @username [—á–∞—Å—ã]")
        print("2. –ü–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞: python sh_new_proxy.py <–∏–º—è_–∫–æ–Ω—Ñ–∏–≥–∞> <–∏—Å—Ç–æ—á–Ω–∏–∫> –Ω–æ–º–µ—Ä [—á–∞—Å—ã]")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("python sh_new_proxy.py config_1 https://t.me/channel_name @username 48")
        print("python sh_new_proxy.py config_1 https://t.me/channel_name 0 48")
        sys.exit(1)

    import asyncio
    config_name = sys.argv[1]
    source_chat = sys.argv[2]
    target_chat = sys.argv[3]
    hours = int(sys.argv[4]) if len(sys.argv) > 4 else 24
    
    asyncio.run(main(config_name, source_chat, target_chat, hours))
